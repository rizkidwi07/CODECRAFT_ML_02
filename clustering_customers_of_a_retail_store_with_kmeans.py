# -*- coding: utf-8 -*-
"""Clustering Customers of a Retail Store with KMeans.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V3Hu-bICC5htfY0G3wJ9iV11Hq1604mO

# Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""# Import Dataset"""

from google.colab import files
files.upload()

# Check dataset
customers = pd.read_csv('/content/Mall_Customers.csv')
customers

"""# Exploratory Data Analysis (EDA)"""

customers.info()

customers.describe()

"""## Univariate Analysis"""

# analysis of the number of unique values in each feature
customers.hist(bins=50, figsize=(15,10))
plt.show()

"""## Multivariate Analysis"""

# analysis of the relationship between numerical features
sns.pairplot(customers, diag_kind = 'kde')

"""# Data Preparation"""

# For this segmentation analysis, we are primarily interested in 'Annual Income' and 'Spending Score'
# Create a new numpy array X containing only these two features
X = customers.iloc[:, [3, 4]].values

# Use the Elbow Method
print("\nCalculating WCSS for the Elbow Method...")
wcss = []
for i in range(1, 11):
    # n_init=10 is the default and suppresses a future warning.
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42, n_init=10)
    kmeans.fit(X)
    # kmeans.inertia_ returns the WCSS value for an already fitted model.
    wcss.append(kmeans.inertia_)

# Plotting the Elbow Method graph
plt.figure(figsize=(10, 6))
sns.set_style("whitegrid")
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('The Elbow Method')
plt.xlabel('Number of clusters (K)')
plt.ylabel('WCSS (Within-Cluster Sum of Squares)')
plt.xticks(np.arange(1, 11, 1))
plt.show()

"""From the plot, we can observe a distinct elbow at K=5.
This suggests that 5 is the optimal number of clusters for this dataset.

# Training Model
"""

print("\nTraining the K-Means model with K=5...")
kmeans = KMeans(n_clusters=5, init='k-means++', random_state=42, n_init=10)
# fit_predict computes cluster centers and predicts cluster index for each sample.
y_kmeans = kmeans.fit_predict(X)

# y_kmeans now holds the cluster label (from 0 to 4) for each customer.
print("Cluster labels for the first 10 customers:")
print(y_kmeans[:10])

"""# Visualization Clustering Customers"""

print("\nVisualizing the customer segments...")
plt.figure(figsize=(12, 8))
sns.set_style("whitegrid")

# Plotting the clusters
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 60, c = 'red', label = 'Cluster 1 - Standard')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 60, c = 'blue', label = 'Cluster 2 - Careful')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 60, c = 'green', label = 'Cluster 3 - Target')
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 60, c = 'cyan', label = 'Cluster 4 - Careless')
plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 60, c = 'magenta', label = 'Cluster 5 - Sensible')

# Plotting the centroids
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 150, c = 'yellow', label = 'Centroids', edgecolors='black')

plt.title('Clusters of Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

print("\n--- Analysis Complete ---")
print("The plot above shows the five distinct customer segments based on their income and spending habits.")